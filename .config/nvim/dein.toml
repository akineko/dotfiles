[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'thinca/vim-localrc'

# ----- textobj -----
# [[plugins]]
# repo = 'kana/vim-textobj-user'

# [[plugins]]
# repo = 'kana/vim-textobj-entire'

# [[plugins]]
# repo = 'kana/vim-textobj-line'

# [[plugins]]
# repo = 'kana/vim-textobj-function'

# [[plugins]]
# repo = 'kana/vim-textobj-underscore'

# [[plugins]]
# repo = 'thinca/vim-textobj-between'

# [[plugins]]
# repo = 'thinca/vim-textobj-comment'

# [[plugins]]
# repo = 'sgur/vim-textobj-parameter'

# [[plugins]]
# repo = 'kana/vim-textobj-jabraces'

# [[plugins]]
# repo = 'osyo-manga/vim-textobj-multiblock'

# [[plugins]]
# repo = 'rhysd/vim-textobj-ruby'
# on_ft = 'ruby'

# ----- operator -----
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'emonkak/vim-operator-sort'
hook_add = '''
vmap S <Plug>(operator-sort)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
map R <Plug>(operator-replace)
'''

# [[plugins]]
# repo = 'rhysd/vim-operator-surround'
# hook_add = '''
# map <silent>sa <Plug>(operator-surround-append)
# map <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
# map <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
# '''

[[plugins]]
repo = 'tyru/operator-camelize.vim'
hook_add = '''
vmap <leader>U <Plug>(operator-camelize)
vmap <leader>u <Plug>(operator-decamelize)
'''


# ----- denite -----
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap [Denite] <Nop>
nmap <Space>u [Denite]
nnoremap <silent> [Denite]f :<C-u>Denite -split=no file<CR>
nnoremap <silent> [Denite]m :<C-u>Denite -split=no file_mru<CR>
nnoremap <silent> [Denite]y :<C-u>Denite neoyank<CR>
nnoremap <silent> [Denite]b :<C-u>Denite -split=no buffer<CR>
nnoremap <silent> [Denite]g :<C-u>Denite grep<CR>
nnoremap <silent> [Denite]o :<C-u>Denite -split=vertical -winwidth=30 outline<CR>
nnoremap <silent> [Denite]jl :<C-u>Denite junkfile<CR>
nnoremap <silent> [Denite]jn :<C-u>Denite junkfile:new junkfile<CR>
" 直前の結果の再利用
nnoremap <silent> [Denite]r :<C-u>Denite -resume<CR>
nnoremap <silent> [Denite]n :<C-u>Denite -resume -select=+1 -immediately<CR>
nnoremap <silent> [Denite]p :<C-u>Denite -resume -select=-1 -immediately<CR>

autocmd Filetype denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
  nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> <C-t>   denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> t       denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> <C-v>   denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> v       denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> <C-x>   denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><expr> s       denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><expr> u       denite#do_map('move_up_path')
  nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q       denite#do_map('quit')
  nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
endfunction
'''
hook_source = '''
if executable('rg')
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-heading'])
elseif executable('ag')
  call denite#custom#var('file/rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
endif

call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
      \   '.build*/', 'vendor/'])
'''

# ----- utility -----
# [[plugins]]
# repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'othree/eregex.vim'
hook_add = '''
let g:eregex_default_enable = 0
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

" statusline
if exists('*anzu#search_status')
  set statusline=%{anzu#search_status()}
endif
'''

[[plugins]]
repo = 'sjl/gundo.vim'

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap <silent> <leader>r :<C-u>QuickRun<CR>

let g:quickrun_config = {
\   "cpp" : {
\       "cmdopt" : "-Wall -std=c++17",
\   },
\}
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

# [[plugins]]
# repo = 'neomake/neomake'
# hook_add = '''
# autocmd! BufWritePost * Neomake
# let g:neomake_go_enabled_makers = ['go', 'golint', 'govet', 'errcheck']
# '''

# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
# let g:ale_sign_column_always = 1
# 
# let g:ale_lint_on_enter = 0
# let g:ale_lint_on_filetype_changed = 0
# let g:ale_lint_on_save = 1
# let g:ale_lint_on_text_changed = 0
# let g:ale_lint_on_insert_leave = 0
# 
# let g:ale_linters = {
#  \ 'php': ['phpcs', 'php'],
#  \}
# 
# let g:ale_php_phpcs_standard = 'PSR2'
# '''

# [[plugins]]
# repo = 'majutsushi/tagbar'
# hook_add = '''
# let g:tagbar_autofocus = 1
# let g:tagbar_autoclose = 1
# nnoremap <Leader>t :<C-u>TagbarToggle<CR>
# '''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_default_executive = 'vim_lsp'
let g:vista_finder_alternative_executives = ['ctags']
" let g:vista_icon_indent = ["▸ ", ""]
let g:vista_echo_cursor = 0
let g:vista_close_on_jump = 0
let g:vista_blink = [0, 0]
let g:vista_top_level_blink = [0, 0]
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
let g:vista_fzf_preview = ['right:50%']
let g:vista_keep_fzf_colors = 0

nnoremap <Leader>t :<C-u>Vista!!<CR>
autocmd FileType vista,vista_kind nnoremap <buffer> <silent> / :<C-u>call vista#finder#fzf#Run()<CR>
'''


[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
depends = 'nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern.vim'
depends = 'FixCursorHold.nvim'
hook_add = '''
let g:fern#default_hidden = 1

nnoremap <Space>f :<C-u>Fern . -reveal=% -stay<CR>
nnoremap <f2> :<C-u>Fern . -drawer -reveal=% -toggle<CR>


function! s:init_fern() abort
  nnoremap <Plug>(fern-close-drawer) :<C-u>FernDo close -drawer -stay<CR>
  nmap <buffer><silent> <Plug>(fern-action-open-and-close)
      \ <Plug>(fern-action-open)
      \ <Plug>(fern-close-drawer)

  nmap <buffer> t <Plug>(fern-action-open:tabedit)
  nmap <buffer> T <Plug>(fern-action-open:tabedit)gT
  nmap <buffer> <C-x> <Plug>(fern-action-open:split)
  nmap <buffer> <C-v> <Plug>(fern-action-open:vsplit)

  nmap <buffer> D <Plug>(fern-action-remove)
  nnoremap <buffer> q :<C-u>quit<CR>
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = ['fern.vim', 'nerdfont.vim']

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends = 'fern.vim'

[[plugins]]
repo = 'LumaKernel/fern-mapping-fzf.vim'
depends = ['fzf', 'fern.vim']

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'component': {
      \   'readonly': '%{&readonly?"⭤":""}',
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightlineFilename()
  return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
        \ &filetype ==# 'unite' ? unite#get_status_string() :
        \ &filetype ==# 'vimshell' ? vimshell#get_status_string() :
        \ expand('%') !=# '' ? expand('%') : '[No Name]'
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:50%:hidden', '?'),
  \   <bang>0)

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! ProjectFiles execute 'Files' s:find_git_root()

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind alt-a:select-all,alt-d:deselect-all'

nnoremap [fzf] <Nop>
nmap <Leader>f [fzf]
nnoremap [fzf]f :<C-u>Files<CR>
nnoremap [fzf]b :<C-u>Buffers<CR>
" nnoremap [fzf]t :<C-u>Tags<CR>
nnoremap [fzf]t :<C-u>Vista finder<CR>

" nnoremap <silent> <C-p> :ProjectFiles<CR>
nnoremap <silent> <C-p> :GFiles<CR>
'''

# [[plugins]]
# repo = 'ctrlpvim/ctrlp.vim'
#
# [[plugins]]
# repo = 'nixprime/cpsm'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:prefix)
xmap <Leader>c <Plug>(caw:prefix)
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'

# [[plugins]]
# repo = 'kana/vim-smartinput'

# [[plugins]]
# repo = 'cohama/lexima.vim'

# [[plugins]]
# repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'windwp/nvim-autopairs'
hook_add = '''
lua require('nvim-autopairs').setup{}
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'taka84u9/vim-ref-ri'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap [fugitive] <Nop>
nmap <Space>g [fugitive]
nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
nnoremap <silent> [fugitive]a :Gwrite<CR>
nnoremap <silent> [fugitive]c :Gcommit<CR>
nnoremap <silent> [fugitive]b :Gblame<CR>
nnoremap <silent> [fugitive]d :Gdiff<CR>
nnoremap <silent> [fugitive]m :Gmerge<CR>
nnoremap <silent> [fugitive]i :Grebase<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set updatetime=1000
let g:gitgutter_sign_allow_clobber = 1
'''

[[plugins]]
repo = 'dhruvasagar/vim-zoom'
hook_add = '''
nmap <C-w>o <Plug>(zoom-toggle)
'''

# [[plugins]]
# repo = 'thaerkh/vim-workspace'
# hook_add = '''
# nnoremap <leader>s :<C-u>ToggleWorkspace<CR>
# let g:workspace_session_directory = $HOME . '/.vim/sessions/'
# let g:workspace_undodir = $HOME . '/.vim/sessions/.undodir'
# let g:workspace_session_disable_on_args = 1
# let g:workspace_autosave_untrailspaces = 0
# '''

[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'xolox/vim-session'
depends = 'vim-misc'
hook_add = '''
let g:session_lock_enabled = 0
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 5
let g:session_autosave_silent = 1
let g:session_persist_font = 0
let g:session_persist_colors = 0
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = '''
let g:precious_enable_switchers = {
    \	"*" : {
    \		"setfiletype" : 0
    \	},
    \	"help" : {
    \		"setfiletype" : 1
    \	},
    \	"toml" : {
    \		"setfiletype" : 1
    \	},
    \}
" let g:precious_enable_switch_CursorMoved = {
"   \  "*" : 0,
"   \  "help" : 1,
"   \  "toml" : 1,
"   \}
" let g:precious_enable_switch_CursorMove_i = {
"   \  "*" : 0,
"   \  "help" : 1,
"   \  "toml" : 1,
"   \}
" let g:precious_enable_switch_CursorHold = {
"   \  "*" : 0,
"   \  "help" : 1,
"   \  "toml" : 1,
"   \}

" augroup MyPreciousCmd
"   autocmd!
"   autocmd InsertEnter * :PreciousSwitch
"   autocmd InsertLeave * :PreciousReset
" augroup END
'''

# ----- nvim-lsp -----
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
depends = ['nvim-lspconfig', 'lsp_signature.nvim']
hook_add = '''
lua << EOF
local on_attach = function (client, bufnr)
  vim.wo.signcolumn = 'yes'
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end

  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', '<leader>dc', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', '<leader>df', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', '<leader>h', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', '<leader>li', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<leader><C-h>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<leader>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<leader>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<leader>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<leader>tdf', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<leader>rf', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<leader>ls', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '<leader>lk', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', '<leader>lj', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<leader>ll', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<leader>lf', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

  -- vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  --   vim.lsp.diagnostic.on_publish_diagnostics, {
  --     virtual_text = false,
  --   }
  -- )

  -- require "lsp_signature".on_attach()
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.commitCharactersSupport = true
capabilities.textDocument.completion.completionItem.deprecatedSupport = true
capabilities.textDocument.completion.completionItem.insertReplaceSupport = true
capabilities.textDocument.completion.completionItem.labelDetailsSupport = true
capabilities.textDocument.completion.completionItem.preselectSupport = true
capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.completion.completionItem.tagSupport = { valueSet = { 1 } }
capabilities.textDocument.completion.completionItem.resolveSupport = {
  properties = {
    'documentation',
    'detail',
    'additionalTextEdits',
  }
}

local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
  local opts = {}
  opts.on_attach = on_attach
  opts.capabilities = capabilities

  server:setup(opts)
end)
EOF
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
if = 'has("nvim")'
depends = ['plenary.nvim']
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF
require("null-ls").setup({
  sources = {
    null_ls.builtins.formatting.prettier,
  },
})
EOF
'''

# ----- vim-lsp -----
# [[plugins]]
# repo = 'prabirshrestha/async.vim'
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'

# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
# let g:lsp_diagnostics_enabled = 1
# let g:lsp_diagnostics_echo_cursor = 1
# let g:lsp_diagnostics_float_cursor = 0
# " let g:asynccomplete_auto_popup = 1
# " let g:asynccomplete_auto_completeopt = 1
# " let g:asynccomplete_popup_deley = 200
# let g:lsp_text_edit_enabled = 1
# 
# nnoremap <silent> <leader>h :<C-u>LspHover<CR>
# nnoremap <silent> <leader>dc :<C-u>LspDeclaration<CR>
# nnoremap <silent> <leader>df :<C-u>LspDefinition<CR>
# nnoremap <silent> <leader>tdf :<C-u>LspTypeDefinition<CR>
# nnoremap <silent> <leader>rf :<C-u>LspReferences<CR>
# nnoremap <silent> <leader>rn :<C-u>LspRename<CR>
# nnoremap <silent> <leader>lf :<C-u>LspDocumentFormat<CR>
# nnoremap <silent> <leader>lj :<C-u>LspNextError<CR>
# nnoremap <silent> <leader>lk :<C-u>LspPreviousError<CR>
# nnoremap <silent> <leader>li :<C-u>LspImplementation<CR>
# '''
# 
# [[plugins]]
# repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'vim-denops/denops.vim'

# [[plugins]]
# repo = 'tbodt/deoplete-tabnine'
# build = './install.sh'

# ----- coc.nvim -----
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# merged = 0
# rev = 'release'
# hook_add = '''
# let g:coc_global_extensions = [
#      \  'coc-json',
#      \  'coc-rls',
#      \  'coc-solargraph',
#      \  'coc-tabnine',
#      \  'coc-tsserver',
#      \  'coc-yaml',
#      \]
# 
# nnoremap <silent> <leader>h  :<C-u>call CocAction('doHover')<CR>
# nmap <silent> <leader>df <Plug>(coc-definition)
# nmap <silent> <leader>rf <Plug>(coc-references)
# nmap <silent> <leader>rn <Plug>(coc-rename)
# nnoremap <silent> <leader>ld :<C-u>CocList diagnostics<CR>
# nnoremap <silent> <leader>lo :<C-u>CocList outline<CR>
# nnoremap <silent> <leader>lc :<C-u>CocList commands<CR>
# nnoremap <silent> <leader>lj :<C-u>CocNext<CR>
# nnoremap <silent> <leader>lk :<C-u>CocPrev<CR>
# nnoremap <silent> <leader>lr :<C-u>CocListResume<CR>
# 
# command! -nargs=0 Format :call CocAction('format')
# '''

# ----- filetype -----
[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
" Rust

" Terraform
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1
'''

# ----- syntax -----
# [[plugins]]
# repo = 'vim-jp/cpp-vim'
# on_ft = 'cpp'

# [[plugins]]
# repo = 'vim-ruby/vim-ruby'

# [[plugins]]
# repo = 'chase/vim-ansible-yaml'

# [[plugins]]
# repo = 'cespare/vim-toml'

# [[plugins]]
# repo = 'ekalinin/Dockerfile.vim'

# [[plugins]]
# repo = 'hashivim/vim-terraform'
# hook_add = '''
# let g:terraform_align = 1
# let g:terraform_fmt_on_save = 1
# '''

# ----- colorscheme -----
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'nightsense/snow'

# [[plugins]]
# repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'rakr/vim-one'

[[plugins]]
repo = 'arcticicestudio/nord-vim'

[[plugins]]
repo = 'cormacrelf/vim-colors-github'

[[plugins]]
repo = 'nanotech/jellybeans.vim'

[[plugins]]
repo = 'aereal/vim-colors-japanesque'

[[plugins]]
repo = 'vim-scripts/jammy.vim'

[[plugins]]
repo = 'reedes/vim-colors-pencil'

[[plugins]]
repo = 'vim-scripts/twilight'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'jpo/vim-railscasts-theme'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'vim-scripts/Wombat'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'vim-scripts/rdark'

[[plugins]]
repo = 'mrkn/mrkn256.vim'

