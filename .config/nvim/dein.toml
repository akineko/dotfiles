[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# ----- textobj -----
# [[plugins]]
# repo = 'kana/vim-textobj-user'

# [[plugins]]
# repo = 'kana/vim-textobj-entire'

# [[plugins]]
# repo = 'kana/vim-textobj-line'

# [[plugins]]
# repo = 'kana/vim-textobj-function'

# [[plugins]]
# repo = 'kana/vim-textobj-underscore'

# [[plugins]]
# repo = 'thinca/vim-textobj-between'

# [[plugins]]
# repo = 'thinca/vim-textobj-comment'

# [[plugins]]
# repo = 'sgur/vim-textobj-parameter'

# [[plugins]]
# repo = 'kana/vim-textobj-jabraces'

# [[plugins]]
# repo = 'osyo-manga/vim-textobj-multiblock'

# [[plugins]]
# repo = 'rhysd/vim-textobj-ruby'
# on_ft = 'ruby'

# ----- operator -----
[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'emonkak/vim-operator-sort'

[[plugins]]
repo = 'kana/vim-operator-replace'

# [[plugins]]
# repo = 'rhysd/vim-operator-surround'

[[plugins]]
repo = 'tyru/operator-camelize.vim'

# ----- denite -----
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap [Denite] <Nop>
nmap <Space>u [Denite]
nnoremap <silent> [Denite]f :<C-u>Denite -split=no file<CR>
nnoremap <silent> [Denite]m :<C-u>Denite -split=no file_mru<CR>
nnoremap <silent> [Denite]y :<C-u>Denite neoyank<CR>
nnoremap <silent> [Denite]b :<C-u>Denite -split=no buffer<CR>
nnoremap <silent> [Denite]g :<C-u>Denite grep<CR>
nnoremap <silent> [Denite]o :<C-u>Denite -split=vertical -winwidth=30 outline<CR>
nnoremap <silent> [Denite]jl :<C-u>Denite junkfile<CR>
nnoremap <silent> [Denite]jn :<C-u>Denite junkfile:new junkfile<CR>
" 直前の結果の再利用
nnoremap <silent> [Denite]r :<C-u>Denite -resume<CR>
nnoremap <silent> [Denite]n :<C-u>Denite -resume -select=+1 -immediately<CR>
nnoremap <silent> [Denite]p :<C-u>Denite -resume -select=-1 -immediately<CR>
'''
hook_source = '''
call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>')
call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
call denite#custom#map('normal', "v", '<denite:do_action:vsplit>')
call denite#custom#map('normal', 'r', '<denite:do_action:quickfix>')

if executable('rg')
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-heading'])
elseif executable('ag')
  call denite#custom#var('file/rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
endif

call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
      \   '.build*/', 'vendor/'])
'''

# ----- utility -----
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'vim-scripts/renamer.vim'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'othree/eregex.vim'
hook_add = '''
let g:eregex_default_enable = 0
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

" statusline
if exists('*anzu#search_status')
  set statusline=%{anzu#search_status()}
endif
'''

[[plugins]]
repo = 'sjl/gundo.vim'

[[plugins]]
repo = 't9md/vim-textmanip'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'thinca/vim-qfreplace'

# [[plugins]]
# repo = 'neomake/neomake'
# hook_add = '''
#   autocmd! BufWritePost * Neomake
# '''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1

let g:ale_lint_on_enter = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0

let g:ale_linters = {
  \ 'php': ['phpcs', 'php'],
  \}

let g:ale_php_phpcs_standard = 'PSR2'
'''

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeShowHidden = 1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = 'nerdtree'

[[plugins]]
repo = 'cocopon/vaffle.vim'

[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
nmap <Plug>(nomap-dirvish_up) <Plug>(dirvish_up)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:50%:hidden', '?'),
  \   <bang>0)

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! ProjectFiles execute 'Files' s:find_git_root()

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind alt-a:select-all,alt-d:deselect-all'

nnoremap [fzf] <Nop>
nmap <Leader>f [fzf]
nnoremap [fzf]f :<C-u>Files<CR>
nnoremap [fzf]b :<C-u>Buffers<CR>
nnoremap [fzf]t :<C-u>Tags<CR>

" nnoremap <silent> <C-p> :ProjectFiles<CR>
'''

# [[plugins]]
# repo = 'ctrlpvim/ctrlp.vim'
#
# [[plugins]]
# repo = 'nixprime/cpsm'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'lambdalisue/vim-findent'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'

# [[plugins]]
# repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'taka84u9/vim-ref-ri'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set updatetime=1000
let g:gitgutter_sign_allow_clobber = 1
'''

[[plugins]]
repo = 'dhruvasagar/vim-zoom'
hook_add = '''
nmap <C-w>o <Plug>(zoom-toggle)
'''

# [[plugins]]
# repo = 'thaerkh/vim-workspace'
# hook_add = '''
# nnoremap <leader>s :<C-u>ToggleWorkspace<CR>
# let g:workspace_session_directory = $HOME . '/.vim/sessions/'
# let g:workspace_undodir = $HOME . '/.vim/sessions/.undodir'
# let g:workspace_session_disable_on_args = 1
# let g:workspace_autosave_untrailspaces = 0
# '''

[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'xolox/vim-session'
depends = 'vim-misc'
hook_add = '''
let g:session_lock_enabled = 0
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 5
let g:session_autosave_silent = 1
let g:session_persist_font = 0
let g:session_persist_colors = 0
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = '''
let g:precious_enable_switch_CursorMoved = {
      \  "*" : 0,
      \  "help" : 1,
      \  "toml" : 1,
      \}

augroup MyPreciousCmd
  autocmd!
  autocmd InsertEnter * :PreciousSwitch
  autocmd InsertEnter * :PreciousReset
augroup END
'''

# ----- lsp -----
# [[plugins]]
# repo = 'prabirshrestha/async.vim'
#
# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
# let g:lsp_diagnostics_enabled = 0
#
#   if executable('typescript-language-server')
#     augroup LspTypeScript
#       au!
#       autocmd User lsp_setup call lsp#register_server({
#          \ 'name': 'typescript-language-server',
#          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
#          \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
#          \ 'whitelist': ['typescript'],
#          \ })
#       autocmd FileType typescript setlocal omnifunc=lsp#complete
#     augroup END
#   endif
#
#   if executable('pyls')
#     " pip install python-language-server
#     augroup LspPython
#       au!
#       autocmd User lsp_setup call lsp#register_server({
#          \ 'name': 'pyls',
#          \ 'cmd': {server_info->['pyls']},
#          \ 'whitelist': ['python'],
#          \ })
#       autocmd FileType python setlocal omnifunc=lsp#complete
#     augroup END
#   endif
#
#   if executable('golsp')
#     augroup LspGo
#       au!
#       autocmd User lsp_setup call lsp#register_server({
#          \ 'name': 'go-lang',
#          \ 'cmd': {server_info->['gopls']},
#          \ 'whitelist': ['go'],
#          \ })
#       autocmd FileType go setlocal omnifunc=lsp#complete
#       autocmd FileType python,go nmap gd <plug>(lsp-definition)
#     augroup END
#   endif
#
#   if executable('solargraph')
#     augroup LspRuby
#       au!
#       autocmd User lsp_setup call lsp#register_server({
#          \ 'name': 'solargraph',
#          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
#          \ 'initialization_options': {"diagnostics": "true"},
#          \ 'whitelist': ['ruby'],
#          \ })
#       autocmd FileType ruby setlocal omnifunc=lsp#complete
#     augroup END
#   endif
#
#   if executable('clangd')
#     augroup LspCpp
#       au!
#       autocmd User lsp_setup call lsp#register_server({
#          \ 'name': 'clangd',
#          \ 'cmd': {server_info->['clangd']},
#          \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
#          \ })
#       autocmd FileType c,cpp setlocal omnifunc=lsp#complete
#     augroup END
#   endif
# 
#   " if executable('cquery')
#   "   augroup LspCpp
#   "     au!
#   "     autocmd User lsp_setup call lsp#register_server({
#   "        \ 'name': 'cquery',
#   "        \ 'cmd': {server_info->['cquery']},
#   "        \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
#   "        \ 'initialization_options': { 'cacheDirectory': '.cache/cquery' },
#   "        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
#   "        \ })
#   "     autocmd FileType c,cpp setlocal omnifunc=lsp#complete
#   "   augroup END
#   " endif
# '''

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
#
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'

# [[plugins]]
# repo = 'tbodt/deoplete-tabnine'
# build = './install.sh'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
      \  'coc-json',
      \  'coc-rls',
      \  'coc-solargraph',
      \  'coc-tabnine',
      \  'coc-tsserver',
      \  'coc-yaml',
      \]

nnoremap <silent> <leader>h  :<C-u>call CocAction('doHover')<CR>
nmap <silent> <leader>df <Plug>(coc-definition)
nmap <silent> <leader>rf <Plug>(coc-references)
nmap <silent> <leader>rn <Plug>(coc-rename)
nnoremap <silent> <leader>ld :<C-u>CocList diagnostics<CR>
nnoremap <silent> <leader>lo :<C-u>CocList outline<CR>
nnoremap <silent> <leader>lc :<C-u>CocList commands<CR>
nnoremap <silent> <leader>lj :<C-u>CocNext<CR>
nnoremap <silent> <leader>lk :<C-u>CocPrev<CR>
nnoremap <silent> <leader>lr :<C-u>CocListResume<CR>
'''

# ----- filetype -----
[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
" Rust

" Terraform
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1
'''

# ----- syntax -----
# [[plugins]]
# repo = 'vim-jp/cpp-vim'
# on_ft = 'cpp'

# [[plugins]]
# repo = 'vim-ruby/vim-ruby'

# [[plugins]]
# repo = 'chase/vim-ansible-yaml'

# [[plugins]]
# repo = 'cespare/vim-toml'

# [[plugins]]
# repo = 'ekalinin/Dockerfile.vim'

# [[plugins]]
# repo = 'hashivim/vim-terraform'
# hook_add = '''
# let g:terraform_align = 1
# let g:terraform_fmt_on_save = 1
# '''

# ----- colorscheme -----
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'nightsense/snow'

# [[plugins]]
# repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'rakr/vim-one'

[[plugins]]
repo = 'arcticicestudio/nord-vim'

[[plugins]]
repo = 'cormacrelf/vim-colors-github'

[[plugins]]
repo = 'nanotech/jellybeans.vim'

[[plugins]]
repo = 'aereal/vim-colors-japanesque'

[[plugins]]
repo = 'vim-scripts/jammy.vim'

[[plugins]]
repo = 'reedes/vim-colors-pencil'

[[plugins]]
repo = 'vim-scripts/twilight'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'jpo/vim-railscasts-theme'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'vim-scripts/Wombat'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'vim-scripts/rdark'

[[plugins]]
repo = 'mrkn/mrkn256.vim'

