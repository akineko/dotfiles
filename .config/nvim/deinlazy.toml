# ----- ddc -----
[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['pum.vim']
on_event = 'InsertEnter'
hook_source = '''
call ddc#custom#patch_global('backspaceCompletion', v:true)
call ddc#custom#patch_global('sources', [
  \ 'nvim-lsp', 'vsnip', 'file',
  \ ])

call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
  \   'matchers': ['matcher_fuzzy'],
  \   'sorters': ['sorter_fuzzy'],
  \   'converters': ['converter_remove_overlap', 'converter_fuzzy'],
  \   'minAutoCompleteLength': 1,
  \   'ignoreCase': v:true,
  \ },
  \ 'nvim-lsp': {
  \   'mark': 'lsp',
  \   'forceCompletionPattern': "\\.|:\\s*|->",
  \ },
  \ 'vim-lsp': {
  \   'mark': 'lsp',
  \   'forceCompletionPattern': "\\.|:\\s*|->",
  \ },
  \ 'tabnine': {
  \   'mark': 'TN',
  \   'maxCandidates': 5,
  \   'isVolatile': v:true,
  \ },
  \ 'rg': {
  \   'mark': 'rg',
  \   'matchers': ['matcher_head', 'matcher_length'],
  \   'minAutoCompleteLength': 4,
  \ },
  \ 'vsnip': {
  \   'mark': 'vsnip',
  \   'dup': v:true,
  \ },
  \ 'buffer': {'mark': 'B'},
  \ 'around': {'mark': 'A'},
  \ 'file': {
  \   'mark': 'F',
  \   'isVolatile': v:true,
  \   'minAutoCompleteLength': 1000,
  \   'forceCompletionPattern': '\S/\S*',
  \ },
  \ 'cmdline': {
  \   'mark': 'cmdline',
  \   'forceCompletionPattern': '\S/\S*',
  \ },
  \ 'cmdline-history': {'mark': 'history'},
  \ })

call ddc#custom#patch_global('sourceParams', {
  \ 'buffer': {
  \   'requireSameFiletype': v:true,
  \   'fromAltBuf': v:true,
  \   'forceCollect': v:true,
  \ },
  \ })

call ddc#custom#patch_global('filterParams', {
  \ 'converter_fuzzy': {'hlGroup': 'DiffText'},
  \ })

call ddc#custom#patch_filetype(['vim'], {
  \ 'sources': ['vim-lsp', 'buffer', 'around', 'file'],
  \ })

" pum.vim
call ddc#custom#patch_global('completionMenu', 'pum.vim')

inoremap <silent><expr> <C-n>
 \ pum#visible()
 \ ? '<Cmd>call pum#map#insert_relative(+1)<CR>'
 \ : ddc#manual_complete()
inoremap <silent><expr> <C-p>
 \ pum#visible()
 \ ? '<Cmd>call pum#map#insert_relative(-1)<CR>'
 \ : ddc#manual_complete()
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
" without nvim-autopairs
" inoremap <silent><expr> <CR>
"\ pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'
" with nvim-autopairs
inoremap <silent><expr> <CR>
 \ pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : v:lua.MPairs.completion_confirm()
inoremap <silent><expr> <C-l>   ddc#map#extend()

" call pum#set_option('setline_insert', v:true)
autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)

call ddc#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

# ----- ddc-filter -----
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

# ----- ddc-source -----
[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

# ----- LSP -----
[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
if = 'has("nvim")'
depends = ['plenary.nvim']
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF
require('null-ls').setup{
  sources = {
    require('null-ls').builtins.formatting.prettier,
  },
}
EOF
'''

[[plugins]]
repo = 'folke/trouble.nvim'
if = 'has("nvim")'
depends = ['nvim-web-devicons']
on_event = 'VimEnter'
hook_add = '''
nnoremap <leader>xx :TroubleToggle<CR>
nnoremap <leader>xw :TroubleToggle workspace_diagnostics<CR>
nnoremap <leader>xd :TroubleToggle document_diagnostics<CR>
nnoremap <leader>xq :TroubleToggle quickfix<CR>
nnoremap <leader>xl :TroubleToggle loclist<CR>
nnoremap gR :TroubleToggle lsp_references<CR>
'''
hook_post_source = '''
lua << EOF
require("trouble").setup()
EOF
'''

[[plugins]]
repo = 'tami5/lspsaga.nvim'
if = 'has("nvim")'
depends = ['nvim-lspconfig']
on_event = 'VimEnter'
hook_add = '''
nnoremap gd          :Lspsaga preview_definition<CR>
nnoremap K           :Lspsaga hover_doc<CR>
nnoremap S           :Lspsaga signature_help<CR>
nnoremap <leader>rn  :Lspsaga rename<CR>
nnoremap gf          :Lspsaga lsp_finder<CR>
nnoremap ge          :Lspsaga show_line_diagnostics<CR>
nnoremap gk          :Lspsaga diagnostic_jump_prev<CR>
nnoremap gj          :Lspsaga diagnostic_jump_next<CR>
nnoremap <leader>lca :Lspsaga code_action<CR>
vnoremap <leader>lca :<C-u>Lspsaga code_action<CR>

nnoremap <silent> <C-b> :lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>
nnoremap <silent> <C-f> :lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>

nnoremap <A-t> :<C-u>Lspsaga open_floaterm<CR>
tnoremap <A-t> <C-\><C-n>:Lspsaga close_floaterm<CR>
'''
hook_post_source = '''
lua << EOF
require('lspsaga').setup {
}
EOF
'''

# ----- treesitter -----
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
merged = 0
on_event = 'VimEnter'
hook_post_update = 'TSUpdate'
hook_post_source = '''
lua << EOF
require('nvim-treesitter.configs').setup {
  ensure_installed = 'all',
  highlight = {
    enable = true,
    disable = {'toml', 'lua', 'vim'},
  },
  -- indent = {
  --   enable = true,
  -- },
}
EOF
'''

# ----- telescope -----
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
if = 'has("nvim")'
depends = ['plenary.nvim', 'nvim-web-devicons', 'telescope-fzf-native.nvim', 'trouble.nvim']
on_event = 'VimEnter'
hook_source = '''
lua << EOF
local actions = require('telescope.actions')
local action_state = require('telescope.actions.state')
local trouble = require('trouble.providers.telescope')

local custom_actions = {}
function custom_actions._multiopen(prompt_bufnr, open_cmd)
  local picker = action_state.get_current_picker(prompt_bufnr)
  local num_selections = #picker:get_multi_selection()
  if not num_selections or num_selections <= 1 then
    actions.add_selection(prompt_bufnr)
  end
  actions.send_selected_to_qflist(prompt_bufnr)

  local results = vim.fn.getqflist()

  for _, result in ipairs(results) do
    local current_file = vim.fn.bufname()
    local next_file = vim.fn.bufname(result.bufnr)

    if current_file == "" then
      vim.api.nvim_command("edit" .. " " .. next_file)
    else
      vim.api.nvim_command(open_cmd .. " " .. next_file)
    end
  end

  vim.api.nvim_command("cd .")
end
function custom_actions.multi_selection_open_vsplit(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "vsplit")
end
function custom_actions.multi_selection_open_split(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "split")
end
function custom_actions.multi_selection_open_tab(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "tabe")
end
function custom_actions.multi_selection_open(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "edit")
end

require('telescope').setup{
  defaults = {
    mappings = {
      i = {
        ["<ESC>"] = actions.close,
        ["<C-j>"] = actions.move_selection_next,
        ["<C-k>"] = actions.move_selection_previous,
        ["<C-i>"] = actions.toggle_selection,
        ["<C-a>"] = actions.toggle_all,
        ["<C-u>"] = actions.preview_scrolling_up,
        ["<C-d>"] = actions.preview_scrolling_down,
        ["<C-v>"] = custom_actions.multi_selection_open_vsplit,
        ["<C-s>"] = custom_actions.multi_selection_open_split,
        ["<C-t>"] = custom_actions.multi_selection_open_tab,
        ["<C-o>"] = trouble.smart_open_with_trouble,
      },
      n = i,
    },
  },
  extensions = {
    fzf = {
      fuzzy = true,
      override_generic_sorter = true,
      override_file_sorter = true,
      case_mode = "smart_case", -- or "ignore_case" or "respect_case"
    }
  }
}

require('telescope').load_extension('fzf')
require('telescope').load_extension('frecency')
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
if = 'has("nvim")'
build = 'make'

[[plugins]]
repo = 'nvim-telescope/telescope-frecency.nvim'
if = 'has("nvim")'
on_source = 'telescope.nvim'
hook_post_source = '''
lua require('telescope').load_extension('frecency')
'''

# ----- golang -----
[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

# ----- HTML -----
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php']

# ----- Ruby -----
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

# ----- denite -----
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['denite.nvim']

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = ['denite.nvim']

[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = ['denite.nvim']

[[plugins]]
repo = 'osyo-manga/unite-filetype'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-sudo'
on_source = ['denite.nvim']

[[plugins]]
repo = 'sorah/unite-ghq'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-build'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-help'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Kocha/vim-unite-tig'
on_source = ['denite.nvim']

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = ['denite.nvim']

[[plugins]]
repo = 'ujihisa/unite-rake'
on_source = ['denite.nvim']

[[plugins]]
repo = 'basyura/unite-rails'
on_source = ['denite.nvim']

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim'
on_source = ['denite.nvim']

# ----- utility -----

[[plugins]]
repo = 'kana/vim-submode'
on_event = ['VimEnter']
hook_post_source = '''
" window
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
" tab
call submode#enter_with('movetab', 'n', '', '<C-t>l', ':<C-u>+tabmove<CR>')
call submode#enter_with('movetab', 'n', '', '<C-t>h', ':<C-u>-tabmove<CR>')
call submode#map('movetab', 'n', '', 'l', ':<C-u>+tabmove<CR>')
call submode#map('movetab', 'n', '', 'h', ':<C-u>-tabmove<CR>')
'''

