# ----- ddc -----
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
hook_source = '''
call ddc#custom#patch_global('sources', [
  \ 'tabnine', 'vim-lsp', 'rg', 'file',
  \ ])

call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
  \   'matchers': ['matcher_head'],
  \   'minAutoCompleteLength': 2,
  \ },
  \ 'vim-lsp': {
  \   'mark': 'lsp',
  \   'forceCompletionPattern': "\\.|:\\s*|->",
  \ },
  \ 'tabnine': {
  \   'mark': 'TN',
  \   'maxCandidates': 5,
  \   'isVolatile': v:true,
  \ },
  \ 'rg': {'mark': 'rg'},
  \ 'buffer': {'mark': 'B'},
  \ 'around': {'mark': 'A'},
  \ 'file': {
  \   'mark': 'F',
  \   'isVolatile': v:true,
  \   'forceCompletionPattern': '\S/\S*',
  \ },
  \ 'cmdline': {
  \   'mark': 'cmdline',
  \   'forceCompletionPattern': '\S/\S*',
  \ },
  \ 'cmdline-history': {'mark': 'history'},
  \ })

call ddc#custom#patch_global('sourceParams', {
  \ 'buffer': {
  \   'requireSameFiletype': v:true,
  \   'fromAltBuf': v:true,
  \   'forceCollect': v:true,
  \ },
  \ })

call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

# ----- ddc-source -----
[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# if = "has('nvim')"
# on_event = 'InsertEnter'
# hook_source = '''
# let g:deoplete#enable_at_startup = 1
# let g:deoplete#enable_camel_case = 1
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_source = '''
# imap <C-k> <Plug>(neosnippet_expand_or_jump)
# smap <C-k> <Plug>(neosnippet_expand_or_jump)
# " xmap <C-k> <Plug>(neosnippet_expand_target)
# if has('conceal')
#   set conceallevel=2 concealcursor=niv
# endif
# let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
# let g:go_snippet_engine = "neosnippet"
# '''


# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'


# ----- C++ -----
# [[plugins]]
# repo = 'octol/vim-cpp-enhanced-highlight'
# on_ft = 'cpp'

# libclang を使った syntax highligh
# インストールが一手間なのであとで試す
# [[plugins]]
# repo = 'jeaye/color_coded'
# on_ft = 'cpp'
# 
# [[plugins]]
# repo = 'arakashic/chromatica.nvim'
# on_ft = 'cpp'

# ----- golang -----
# [[plugins]]
# repo = 'zchee/deoplete-go'
# if = "has('nvim')"
# build = 'make'
# on_ft = 'go'
# on_event = 'InsertEnter'
# hook_source = '''
# let g:deoplete#sources#go#package_dot = 1
# let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
# '''


# [[plugins]]
# repo = 'fatih/vim-go'
# on_ft = 'go'
# hook_source = '''
# let g:go_fmt_command = 'goimports'
# let g:go_def_mapping_enabled = 0
# let g:go_highlight_operators = 0
# let g:go_highlight_functions = 0
# let g:go_highlight_methods = 0
# let g:go_highlight_types = 0
# let g:go_highlight_fields = 0
# let g:go_highlight_build_constraints = 0
# let g:go_term_enabled = 1
# '''

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

# ----- HTML -----
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php']

# ----- Ruby -----
# [[plugins]]
# repo = 'fishbullet/deoplete-ruby'
# on_ft = 'ruby'

# [[plugins]]
# repo = 'uplus/deoplete-solargraph'
# on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

# [[plugins]]
# repo = 'todesking/ruby_hl_lvar.vim'
# on_ft = 'ruby'

# ----- terraform -----
[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = 'terraform'

# ----- denite -----
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['denite.nvim']

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = ['denite.nvim']

[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = ['denite.nvim']

[[plugins]]
repo = 'osyo-manga/unite-filetype'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-sudo'
on_source = ['denite.nvim']

[[plugins]]
repo = 'sorah/unite-ghq'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-build'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-help'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Kocha/vim-unite-tig'
on_source = ['denite.nvim']

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = ['denite.nvim']

[[plugins]]
repo = 'ujihisa/unite-rake'
on_source = ['denite.nvim']

[[plugins]]
repo = 'basyura/unite-rails'
on_source = ['denite.nvim']

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim'
on_source = ['denite.nvim']

# ----- utility -----

[[plugins]]
repo = 'kana/vim-submode'
on_event = ['VimEnter']
hook_post_source = '''
" window
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
" tab
call submode#enter_with('movetab', 'n', '', '<C-t>l', ':<C-u>+tabmove<CR>')
call submode#enter_with('movetab', 'n', '', '<C-t>h', ':<C-u>-tabmove<CR>')
call submode#map('movetab', 'n', '', 'l', ':<C-u>+tabmove<CR>')
call submode#map('movetab', 'n', '', 'h', ':<C-u>-tabmove<CR>')
'''

