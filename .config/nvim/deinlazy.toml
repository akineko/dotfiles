# ----- statusline -----
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
if = 'has("nvim")'
depends = ['nvim-web-devicons']
on_event = ['VimEnter']
hook_post_source = '''
lua << EOF
local function file_encoding()
    return ((vim.bo.fenc ~= '' and vim.bo.fenc) or vim.o.enc)
end

local function lsp_client_names()
    local clients = {}

    for _, client in pairs(vim.lsp.buf_get_clients(0)) do
        clients[#clients + 1] = client.name
    end

    return table.concat(clients, ' ')
end

require("lualine").setup {
  options = {
    theme = 'wombat',
  },
  sections = {
    lualine_b = {
      'branch',
      'diff',
      {'diagnostics', sources = {'nvim_diagnostic'}},
    },
    lualine_c = { {'filename', path = 1} },
    lualine_x = {
      -- {
      --   lsp_client_names,
      --   icon = 'ï‚… LSP:',
      -- },
      file_encoding,
      'fileformat',
      'filetype',
    }
  },
  inactive_sections = {
    lualine_c = { {'filename', path = 1} }
  },
  tabline = {
    lualine_a = {
      {'tabs', max_length = vim.o.columns, mode = 2}
    },
  },
}
EOF
'''

# ----- LSP -----
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'

[[plugins]]
repo = 'williamboman/mason.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
if = 'has("nvim")'
depends = [
  'mason.nvim',
  'nvim-lspconfig',
  'cmp-nvim-lsp',
  'lsp_signature.nvim',
  'nvim-lsp-ts-utils',
  'lsp-format.nvim'
]
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF
require("mason").setup()

local on_attach = function (client, bufnr)
  local opts = { buffer = bufnr, noremap = true, silent = true }
  vim.keymap.set('n', '<leader>lf', ":lua vim.lsp.buf.format{ async = true }<CR>", opts)

  require "lsp_signature".on_attach()
  require('lsp-format').on_attach(client)
end

local ok, _ = pcall(require, 'cmp')
local capabilities
if ok then
  capabilities = require('cmp_nvim_lsp').default_capabilities()
else
  capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.commitCharactersSupport = true
  capabilities.textDocument.completion.completionItem.deprecatedSupport = true
  capabilities.textDocument.completion.completionItem.insertReplaceSupport = true
  capabilities.textDocument.completion.completionItem.labelDetailsSupport = true
  capabilities.textDocument.completion.completionItem.preselectSupport = true
  capabilities.textDocument.completion.completionItem.snippetSupport = true
  capabilities.textDocument.completion.completionItem.tagSupport = { valueSet = { 1 } }
  capabilities.textDocument.completion.completionItem.resolveSupport = {
    properties = {
      'documentation',
      'detail',
      'additionalTextEdits',
    }
  }
end

require('lsp-format').setup{
  typescript = {
    order = { 'null-ls', 'tsserver' }
  }
}

local lspconfig = require("lspconfig")
require("mason-lspconfig").setup()
require("mason-lspconfig").setup_handlers({ function(server_name)
  local opts = {}
  opts.on_attach = on_attach
  opts.capabilities = capabilities

  if server_name == "tsserver" then
    opts.on_attach = function(client, bufnr)
      local ts_utils = require("nvim-lsp-ts-utils")
      ts_utils.setup({
        enable_import_on_completion = true,
        always_organize_imports = true,
      })
      ts_utils.setup_client(client)

      local opts = { noremap=true, silent=true }
      vim.api.nvim_buf_set_keymap(bufnr, "n", "go", ":TSLspOrganize<CR>", opts)
      vim.api.nvim_buf_set_keymap(bufnr, "n", "gi", ":TSLspImportAll<CR>", opts)

      on_attach(client, bufnr)
    end
  end

  lspconfig[server_name].setup(opts)
end})
EOF
'''

[[plugins]]
repo = 'jose-elias-alvarez/nvim-lsp-ts-utils'
if = 'has("nvim")'

[[plugins]]
repo = 'nvim-lua/lsp-status.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'lukas-reineke/lsp-format.nvim'
if = 'has("nvim")'

# ----- null-ls -----
[[plugins]]
repo = 'jay-babu/mason-null-ls.nvim'
if = 'has("nvim")'
depends = ['mason.nvim']

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
if = 'has("nvim")'
depends = ['nvim-lspconfig', 'plenary.nvim', 'mason-null-ls.nvim']
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF
local nvim_lsp = require('lspconfig')
local function find_root()
  local node_root = nvim_lsp.util.find_package_json_ancestor()
  if node_root ~= "" then
    return node_root
  end

  local modules_root = nvim_lsp.util.find_node_modules_ancestor()
  if modules_root ~= "" then
    return modules_root
  end

  return nvim_lsp.util.find_git_ancestor()
end

require('mason').setup()
require('mason-null-ls').setup({
  ensure_installed = {
    'shellcheck',
  },
  automatic_setup = true,
  handlers = {},
})

require('null-ls').setup{
  debug = false,
  sources = {
    -- JavaScript / TypeScript
    -- require('null-ls').builtins.formatting.prettier.with({
        -- prefer_local = "node_modules/.bin",
    -- }),
    -- require('null-ls').builtins.formatting.rome.with({
        -- prefer_local = "node_modules/.bin",
    -- }),
    -- require('null-ls').builtins.formatting.dprint.with({
    --     prefer_local = "node_modules/.bin",
    -- }),
    -- require('null-ls').builtins.code_actions.xo.with({
    --     prefer_local = "node_modules/.bin",
    -- }),
    require('null-ls').builtins.diagnostics.xo.with({
        prefer_local = "node_modules/.bin",
    }),
    -- require('null-ls').builtins.diagnostics.eslint.with({
    --     prefer_local = "node_modules/.bin",
    -- }),
  },
}

EOF
'''

# ----- lsp tools -----

[[plugins]]
repo = 'folke/trouble.nvim'
if = 'has("nvim")'
depends = ['nvim-web-devicons']
on_event = 'VimEnter'
hook_add = '''
nnoremap <leader>xx :TroubleToggle<CR>
nnoremap <leader>xw :TroubleToggle workspace_diagnostics<CR>
nnoremap <leader>xd :TroubleToggle document_diagnostics<CR>
nnoremap <leader>xq :TroubleToggle quickfix<CR>
nnoremap <leader>xl :TroubleToggle loclist<CR>
nnoremap gR :TroubleToggle lsp_references<CR>
'''
hook_post_source = '''
lua << EOF
require("trouble").setup()
EOF
'''

[[plugins]]
repo = 'nvimdev/lspsaga.nvim'
if = 'has("nvim")'
depends = ['nvim-lspconfig']
on_event = 'VimEnter'
hook_add = '''
nnoremap K           :Lspsaga hover_doc<CR>
nnoremap <leader>rn  :Lspsaga rename<CR>
nnoremap gf          :Lspsaga finder<CR>
nnoremap gD          :Lspsaga peek_definition<CR>
nnoremap <leader>lo  :Lspsaga outline<CR>
nnoremap <F4>        :Lspsaga outline<CR>
nnoremap ge          :Lspsaga show_line_diagnostics<CR>
nnoremap <leader>lk  :Lspsaga diagnostic_jump_prev<CR>
nnoremap <leader>lj  :Lspsaga diagnostic_jump_next<CR>
nnoremap <leader>lca :Lspsaga code_action<CR>
vnoremap <leader>lca :<C-u>Lspsaga code_action<CR>

nnoremap <A-t> :<C-u>Lspsaga term_toggle<CR>
tnoremap <A-t> <C-\><C-n>:Lspsaga term_toggle<CR>
'''
hook_post_source = '''
lua << EOF
require('lspsaga').setup({
  code_action = {
    show_server_name = true,
  },
  outline = {
    layout = 'float',
    keys = {
      jump = '<CR>',
    }
  },
})
EOF
'''

# ----- treesitter -----
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
merged = 0
depends = ['rainbow-delimiters.nvim', 'nvim-ts-autotag', 'nvim-ts-context-commentstring']
on_event = 'VimEnter'
hook_post_update = 'TSUpdate'
hook_post_source = '''
lua << EOF
local rainbow_delimiters = require 'rainbow-delimiters'
vim.g.rainbow_delimiters = {
    strategy = {
        [''] = rainbow_delimiters.strategy['global'],
        commonlisp = rainbow_delimiters.strategy['local'],
    },
    query = {
        [''] = 'rainbow-delimiters',
        lua = 'rainbow-blocks',
    },
    highlight = {
        'TSRainbowRed',    -- guifg=#bf616a
        'TSRainbowYellow', -- guifg=#ebcb8b
        'TSRainbowBlue',   -- guifg=#81a1c1
        'TSRainbowOrange', -- guifg=#c9826b
        'TSRainbowGreen',  -- guifg=#a3be8c
        'TSRainbowViolet', -- guifg=#b48ead
        'TSRainbowCyan',   -- guifg=#88c0d0
    },
    -- blacklist = {'c', 'cpp'},
}

require('nvim-treesitter.configs').setup {
  ensure_installed = 'all',
  highlight = {
    enable = true,
    disable = {'toml', 'lua', 'vim'},
  },
  -- indent = {
  --   enable = true,
  -- },
  autotag = {
    enable = true,
  },
  context_commentstring = {
    enable = true,
    enable_autocmd = false,
  },
}
EOF
'''

[[plugins]]
repo = 'HiPhish/rainbow-delimiters.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
if = 'has("nvim")'

[[plugins]]
repo = 'romgrk/nvim-treesitter-context'
if = 'has("nvim")'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
if = 'has("nvim")'

# ----- telescope -----
[[plugins]]
repo = 'ahmedkhalf/project.nvim'
if = 'has("nvim")'
on_event = 'VimEnter'
hook_source = '''
lua require("project_nvim").setup({
  detection_methods = { "pattern" },
})
'''

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
if = 'has("nvim")'
depends = [
  'plenary.nvim',
  'nvim-web-devicons',
  'telescope-fzf-native.nvim',
  'telescope-file-browser.nvim',
  'trouble.nvim',
  'project.nvim'
]
on_event = 'VimEnter'
hook_add = '''
nnoremap <leader>tt :Telescope<CR>

nmap <leader>f [Telescope]
" nnoremap [Telescope]f :lua require'telescope-config'.project_files()<CR>
nnoremap [Telescope]f :Telescope find_files hidden=true<CR>
nnoremap [Telescope]F :Telescope find_files hidden=true no_ignore=true<CR>
nnoremap [Telescope]g :Telescope live_grep<CR>
nnoremap [Telescope]b :Telescope buffers<CR>
nnoremap [Telescope]p :Telescope projects<CR>

nnoremap gr :Telescope lsp_references<CR>
nnoremap gd :Telescope lsp_definitions jump_type=never<CR>
nnoremap <leader>rf :Telescope lsp_references<CR>
nnoremap <leader>df :Telescope lsp_definitions jump_type=never<CR>
nnoremap gs :Telescope lsp_document_symbols<CR>
nnoremap gw :Telescope lsp_dynamic_workspace_symbols<CR>
nnoremap <leader>td :Telescope lsp_type_definitions<CR>
nnoremap <leader>li :Telescope lsp_implementations<CR>
'''
hook_source = '''
lua << EOF
local actions = require('telescope.actions')
local action_state = require('telescope.actions.state')
local trouble = require('trouble.providers.telescope')

local custom_actions = {}
function custom_actions._multiopen(prompt_bufnr, open_cmd)
  local picker = action_state.get_current_picker(prompt_bufnr)
  local num_selections = #picker:get_multi_selection()
  if not num_selections or num_selections <= 1 then
    actions.add_selection(prompt_bufnr)
  end
  actions.send_selected_to_qflist(prompt_bufnr)

  local results = vim.fn.getqflist()

  for _, result in ipairs(results) do
    local current_file = vim.fn.bufname()
    local next_file = vim.fn.bufname(result.bufnr)

    if current_file == "" then
      vim.api.nvim_command("edit" .. " " .. next_file)
    else
      vim.api.nvim_command(open_cmd .. " " .. next_file)
    end
  end

  vim.api.nvim_command("cd .")
end
function custom_actions.multi_selection_open_vsplit(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "vsplit")
end
function custom_actions.multi_selection_open_split(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "split")
end
function custom_actions.multi_selection_open_tab(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "tabe")
end
function custom_actions.multi_selection_open(prompt_bufnr)
    custom_actions._multiopen(prompt_bufnr, "edit")
end

require('telescope').setup{
  defaults = {
    mappings = {
      i = {
        ["<ESC>"] = actions.close,
        ["<C-j>"] = actions.move_selection_next,
        ["<C-k>"] = actions.move_selection_previous,
        ["<C-i>"] = actions.toggle_selection,
        ["<C-a>"] = actions.toggle_all,
        ["<C-u>"] = actions.preview_scrolling_up,
        ["<C-d>"] = actions.preview_scrolling_down,
        ["<C-v>"] = custom_actions.multi_selection_open_vsplit,
        ["<C-s>"] = custom_actions.multi_selection_open_split,
        ["<C-t>"] = custom_actions.multi_selection_open_tab,
        ["<M-l>"] = actions.smart_send_to_loclist + actions.open_loclist,
        ["<M-o>"] = trouble.smart_open_with_trouble,
      },
      n = i,
    },
  },
  extensions = {
    fzf = {
      fuzzy = true,
      override_generic_sorter = true,
      override_file_sorter = true,
      case_mode = "smart_case", -- or "ignore_case" or "respect_case"
    },
    file_browser = {
      -- theme = "ivy",
      hidden = true,
      mappings = {
        ["i"] = {
          -- your custom insert mode mappings
        },
        ["n"] = {
          -- your custom normal mode mappings
        },
      },
    },
  }
}

require('telescope').load_extension('fzf')
require('telescope').load_extension('frecency')
require('telescope').load_extension('projects')
require('telescope').load_extension('file_browser')
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
if = 'has("nvim")'
build = 'make'

[[plugins]]
repo = 'nvim-telescope/telescope-frecency.nvim'
if = 'has("nvim")'
on_source = 'telescope.nvim'
hook_post_source = '''
lua require('telescope').load_extension('frecency')
'''

[[plugins]]
repo = 'nvim-telescope/telescope-file-browser.nvim'
if = 'has("nvim")'
depends = [
  'plenary.nvim',
  'telescope-fzf-native.nvim',
]

# ----- utility -----
[[plugins]]
repo = 'numToStr/Comment.nvim'
if = 'has("nvim")'
on_event = ['VimEnter']
depends = ['nvim-ts-context-commentstring']
hook_post_source = '''
lua << EOF
require('Comment').setup{
  toggler = {
    line = '<leader>cc',
    block = '<leader>cb',
  },
  opleader = {
    line = '<leader>cc',
    block = '<leader>cb',
  },
  mappings = {
    extra = false,
  },
  pre_hook = require('ts_context_commentstring.integrations.comment_nvim').create_pre_hook(),
}
EOF
'''

[[plugins]]
repo = 'windwp/nvim-autopairs'
if = 'has("nvim")'
on_event = 'VimEnter'
hook_post_source = '''
lua require('nvim-autopairs').setup{}
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
if = 'has("nvim")'
on_event = 'VimEnter'
hook_post_source = '''
lua require('hop').setup()
'''
hook_add = '''
nnoremap <leader>m :<C-u>HopWord<CR>
'''

[[plugins]]
repo = 'sidebar-nvim/sidebar.nvim'
if = 'has("nvim")'
on_event = 'VimEnter'
hook_add = '''
nnoremap <F3> :SidebarNvimToggle<CR>
'''
hook_post_source = '''
lua << EOF
require('sidebar-nvim').setup {
  hide_statusline = true,
  sections = {
    'symbols',
    'git',
    'todos',
    'containers',
    'files',
  },
  files = {
    show_hidden = true,
  },
}
EOF
'''

[[plugins]]
repo = 'nvim-tree/nvim-tree.lua'
if = 'has("nvim")'
on_event = 'VimEnter'
depends = ['nvim-web-devicons']
hook_add = '''
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
nnoremap <F2> :NvimTreeToggle<CR>
'''
hook_post_source = '''
lua << EOF
local api = require('nvim-tree.api')

local function on_attach(bufnr)
  local function opts(desc)
    return { desc = desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
  end

  api.config.mappings.default_on_attach(bufnr)

  vim.keymap.set('n', '?', api.tree.toggle_help, opts('Help'))
  vim.keymap.set('n', '<C-y>', api.fs.copy.absolute_path, opts('Copy Absolute Path'))
end

require('nvim-tree').setup {
  on_attach = on_attach,
  git = {
    ignore = false,
  },
  actions = {
    open_file = {
      quit_on_open = true,
      -- window_picker = {
      --   enable = false,
      -- },
    },
  },
}
EOF
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
if = 'has("nvim")'
on_event = ['VimEnter']
hook_post_source = '''
lua << EOF
require('gitsigns').setup({})
EOF
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
if = 'has("nvim")'
on_event = ['VimEnter']
hook_post_source = '''
lua << EOF
require('colorizer').setup()
EOF
'''

[[plugins]]
repo = 'kana/vim-submode'
on_event = ['VimEnter']
hook_post_source = '''
" window
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
" tab
call submode#enter_with('movetab', 'n', '', '<C-t>l', ':<C-u>+tabmove<CR>')
call submode#enter_with('movetab', 'n', '', '<C-t>h', ':<C-u>-tabmove<CR>')
call submode#map('movetab', 'n', '', 'l', ':<C-u>+tabmove<CR>')
call submode#map('movetab', 'n', '', 'h', ':<C-u>-tabmove<CR>')
'''

# ----- golang -----
[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

# ----- HTML -----
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php']

# ----- Ruby -----
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

# ----- denite -----
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['denite.nvim']

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = ['denite.nvim']

[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = ['denite.nvim']

[[plugins]]
repo = 'osyo-manga/unite-filetype'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-sudo'
on_source = ['denite.nvim']

[[plugins]]
repo = 'sorah/unite-ghq'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-build'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-help'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Kocha/vim-unite-tig'
on_source = ['denite.nvim']

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = ['denite.nvim']

[[plugins]]
repo = 'ujihisa/unite-rake'
on_source = ['denite.nvim']

[[plugins]]
repo = 'basyura/unite-rails'
on_source = ['denite.nvim']

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim'
on_source = ['denite.nvim']
